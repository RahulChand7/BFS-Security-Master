<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_niit3_bfs_secu_0_cross_reference_instrument</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Abort Duplicate Synonym</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {
    // Add your code here
	gs.info('raahul inside abbot:');
    var ins = current.getValue('instrumenent_name');
    var codif = current.getValue('codeif');
    var ident = current.getValue('identifier');
    var codf_shrtname = current.codeif.short_name.toString();
    var delInstr = '';
    var dupSynmGenCheck = '';
    var dupcheckBRSnSEDO = '';
    var dupCheckBRSB = '';
    var synonymAborted = false;
	gs.info('raahul instrument_name is: '+ins+'codif is : '+codif+'ident is:'+ident);

    dupSynmGenCheck = new GlideRecord('x_niit3_bfs_secu_0_cross_reference_instrument');
    dupSynmGenCheck.addEncodedQuery('instrumenent_name=' + ins + '^codeif=' + codif + '^deleted=false');
    dupSynmGenCheck.setLimit(1);
    dupSynmGenCheck.query(); //** To avoid Duplicate Syonym with same Codeif value for a Cross Ref Instrument.
    if (dupSynmGenCheck.next()) {
        current.setAbortAction(true);
        gs.addErrorMessage('Synonym already exists with the entered CODEIF for the current Instrument.');
        return;
    }

    if ((codf_shrtname == "BRS") || (codf_shrtname == "SEDO")) { // BRS and SEDO should always be unique in the entire synoym table

        dupcheckBRSnSEDO = new GlideRecord('x_nnipb_data_manag_cross_reference_instrument_synonyms');
        dupcheckBRSnSEDO.addEncodedQuery("deleteflag=false^instrument.created_through!=Delta Insert^instrument.created_through!=TradeSec^inscode=" + ident + "^inscodif.short_name=" + codf_shrtname);
        dupcheckBRSnSEDO.setLimit(1);
        dupcheckBRSnSEDO.query(); //**To avoid  any duplicate BRS or SEDOL code in Non-Delta Inserts.
        if (dupcheckBRSnSEDO.next()) {
            gs.addErrorMessage("The instrument " + current.instrument.name + " has been deleted as there is another Instrument exists with same BRS or SEDO code value.");
            current.setAbortAction(true);
            gs.addErrorMessage('Synonym already exists with same CODEIF and IDENTIFIER values in list of Instrument Synonyms created through RITM, Bulk Import and Manual methods.');
            synonymAborted = true;
        }
        delInstr = new GlideRecord('x_nnipb_data_manag_cross_reference_instrument'); // delete instrument if the SEDO and BRS are deleted or not created.
        if (delInstr.get(ins) && synonymAborted) {
            delInstr.deleteflag = true;
            delInstr.update();
        }
        return;
    }
 
 if ((codf_shrtname == "FISH")) { //Detecting FISH code duplicate only when the duplicate comes through manual or bulk upload
        dupCheckFISH = new GlideRecord('x_nnipb_data_manag_cross_reference_instrument_synonyms');
        dupCheckFISH.addEncodedQuery("deleteflag=false^instrument.created_through!=Delta Insert^instrument.created_through!=TradeSec^ORinstrument.created_through=NULL^inscode=" + ident + "^inscodif.short_name=" + codf_shrtname);
        dupCheckFISH.setLimit(1);
        dupCheckFISH.query();
        if (dupCheckFISH.next()) {
            current.setAbortAction(true);
            gs.addErrorMessage('Synonym already exists with FISH codeif and entered IDENTIFIER value in list of Instrument Synonyms created through RITM, Bulk Import and Manual methods.');
            return;
        }
    }
 

    if ((codf_shrtname == "BRSB")) { //Detecting BRSB code duplicate only when the duplicate comes through Delta Insert
        dupCheckBRSB = new GlideRecord('x_nnipb_data_manag_cross_reference_instrument_synonyms');
        dupCheckBRSB.addEncodedQuery("deleteflag=false^instrument.created_through=Delta Insert^instrument.created_through!=TradeSec^inscode=" + ident + "^inscodif.short_name=" + codf_shrtname);
        dupCheckBRSB.setLimit(1);
        dupCheckBRSB.query();
        if (dupCheckBRSB.next()) {
            current.setAbortAction(true);
            gs.addErrorMessage('Synonym already exists with BRSB codeif and entered IDENTIFIER value in list of Instrument Synonyms created through Delta Insert method.');
            return;
        }
    }
})(current, previous);
]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>rahul.chand</sys_created_by>
        <sys_created_on>2024-04-15 11:24:24</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>b4d622021bed021087c3db15cc4bcb75</sys_id>
        <sys_mod_count>6</sys_mod_count>
        <sys_name>Abort Duplicate Synonym</sys_name>
        <sys_overrides/>
        <sys_package display_value="BFS Security Master" source="x_niit3_bfs_secu_0">2d1a20d81bd9ca5087c3db15cc4bcb61</sys_package>
        <sys_policy/>
        <sys_scope display_value="BFS Security Master">2d1a20d81bd9ca5087c3db15cc4bcb61</sys_scope>
        <sys_update_name>sys_script_b4d622021bed021087c3db15cc4bcb75</sys_update_name>
        <sys_updated_by>rahul.chand</sys_updated_by>
        <sys_updated_on>2024-04-15 17:32:48</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=b4d622021bed021087c3db15cc4bcb75"/>
</record_update>
